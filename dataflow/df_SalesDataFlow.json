{
	"name": "df_SalesDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_SalesData_inbound",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_HeightOutbound",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Invoice ID} as string,",
				"          Branch as string,",
				"          City as string,",
				"          {Customer type} as string,",
				"          Gender as string,",
				"          {Product line} as string,",
				"          {Unit price} as double,",
				"          Quantity as short,",
				"          {Tax 5%} as double,",
				"          Total as double,",
				"          Date as string,",
				"          Time as string,",
				"          Payment as string,",
				"          cogs as double,",
				"          {gross margin percentage} as double,",
				"          {gross income} as double,",
				"          Rating as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          {Invoice ID} as string,",
				"          Branch as string,",
				"          City as string,",
				"          {Customer type} as string,",
				"          Gender as string,",
				"          {Product line} as string,",
				"          {Unit price} as double,",
				"          Quantity as short,",
				"          {Tax 5%} as double,",
				"          Total as double,",
				"          Date as string,",
				"          Time as string,",
				"          Payment as string,",
				"          cogs as double,",
				"          {gross margin percentage} as double,",
				"          {gross income} as double,",
				"          Rating as double",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(Date_Time = concat(toString(Date),':', Time),",
				"          SalesCategory = iif(greater(Total, 200),'high',iif(greater(Total,50), 'Medium', 'Low')),",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(City,",
				"          {Customer type}),",
				"     TotalSales = toDecimal(sum(multiply({Unit price},Quantity)),9,2),",
				"          AvgSales = toDecimal (avg({Unit price}*Quantity),9,2),",
				"          TransactionsCount = count(1)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('sales_outbound_data', toString (currentUTC('GMT'),'yyyymmdd_HHMMSS')))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}