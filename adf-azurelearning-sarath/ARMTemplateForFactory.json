{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-azurelearning-sarath"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"ls_saSarath_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_saSarath'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlsarath-dev.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqldb-sarath-devvv"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "SrinivasMentula"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/loaading_the_dat_into_an_sql_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "year",
							"value": {
								"value": "@activity('Get Metadata1').output.childItems[0].name",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*CSV",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "age",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "age",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Text_3",
								"type": "DatasetReference",
								"parameters": {
									"File_name": {
										"value": "@variables('year')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into [dbo].[pipe_line_status]\n(\n    pipeline_name, \n    pipeline_status, \n    run_time \n)\nvalues(\n    '@{pipeline().Pipeline}', \n    'fail',\n    '@{formatDateTime(utcNow(),'MM-dd-yyyy')}'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pc_one]",
							"storedProcedureParameters": {
								"table_name": {
									"value": "dbo.sample_data",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Script1_copy1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into [dbo].[pipe_line_status]\n(\n    pipeline_name, \n    pipeline_status, \n    run_time \n)\nvalues(\n    '@{pipeline().Pipeline}', \n    'fail',\n    '@{formatDateTime(utcNow(),'MM-dd-yyyy')}'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"year": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/Text_3')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CopyingLastModifiedFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MetaDataOfOuboundFolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_saOutbondContainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Taking_Only_FileData",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MetaDataOfOuboundFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MetaDataOfOuboundFolder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File' )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Taking_Only_FileData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Taking_Only_FileData').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_MetadataOfIndividualFiles",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata1').output.lastModified,variables('DefaultVariable'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "LastModifiedDate",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastModifiedDate",
													"value": {
														"value": "@activity('Get Metadata1').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileName",
													"value": {
														"value": "@activity('Get Metadata1').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_LastModifiedInbound",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('FileName')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_LastModifiedOutbound",
								"type": "DatasetReference",
								"parameters": {
									"OutboundFileNmae": {
										"value": "@if(contains(variables('FileName'),'.'),\n    substring(variables('FileName'),0 ,indexOf(variables('FileName'),'.')),\n    variables('FileName')\n )",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DefaultVariable": {
						"type": "String",
						"defaultValue": "'1900-01-01 T00:00:00'"
					},
					"LastModifiedDate": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-05T07:02:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_saOutbondContainer')]",
				"[concat(variables('factoryId'), '/datasets/ds_LastModifiedInbound')]",
				"[concat(variables('factoryId'), '/datasets/ds_LastModifiedOutbound')]",
				"[concat(variables('factoryId'), '/datasets/ds_MetadataOfIndividualFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_HeightData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_HeightData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-01T13:44:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_HeightData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_I0063_InnerFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MergeFiles",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "TruncateTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": {
										"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'))",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_MergeSource",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'))",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_MergeSource",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'),'/MergeFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "MergeFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Invoice ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InvoiceID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Branch",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Branch",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "City",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "City",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Customer type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Customer",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Product line",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "productLine",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Unit price",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 9
										}
									},
									{
										"source": {
											"name": "Quantity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Qty",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Tax 5%",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Tax",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 9
										}
									},
									{
										"source": {
											"name": "Total",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Total",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 30
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Time",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Time",
											"type": "TimeSpan",
											"physicalType": "time"
										}
									},
									{
										"source": {
											"name": "Payment",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Payment",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "cogs",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Cogs",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "gross margin percentage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GrossMargin",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 9
										}
									},
									{
										"source": {
											"name": "gross income",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GrossIncome",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 9
										}
									},
									{
										"source": {
											"name": "Rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Rating",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 2,
											"precision": 9
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_SalesDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_tbl_SalesImport",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Deletion_of_MergeFile",
						"type": "Delete",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_MergeSource",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'),'/MergeFile')"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "TruncateTable",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_truncateTable]",
							"storedProcedureParameters": {
								"schema_name": {
									"value": "\"dbo\"",
									"type": "String"
								},
								"table_name": {
									"value": "\"tbl_salesImport\"",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Deletion_of_MergeFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_SalesReport]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Stored procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \r\n      [Sale_Date]\r\n      ,[Branch]\r\n      ,[city]\r\n      ,[Total_Sales]\r\n      ,[Total_Transactions]\r\n      ,[Average_Basket_Value]\r\n      ,[productLine]\r\n      ,[Member_Count]\r\n      ,[Normal_Count]\r\n      ,[Payment_Cash]\r\n      ,[Payment_Credit]\r\n      ,[Payment_Ewallet]\r\n      ,[Sales_Male]\r\n      ,[Sales_Female]\r\n      ,[Total_Quantity_Sold]\r\n      ,[Average_Rating]\r\n      ,[GrossIncome]\r\n      ,[Total_COGS]\r\n      ,[Gross_Margin_Percentage]\r\n      ,[Hour_00]\r\n      ,[Hour_01]\r\n      ,[Hour_02]\r\n      ,[Hour_03]\r\n      ,[Hour_04]\r\n      ,[Hour_05]\r\n      ,[Hour_06]\r\n      ,[Hour_07]\r\n      ,[Hour_08]\r\n      ,[Hour_09]\r\n      ,[Hour_10]\r\n      ,[Hour_11]\r\n      ,[Hour_12]\r\n      ,[Hour_13]\r\n      ,[Hour_14]\r\n      ,[Hour_15]\r\n      ,[Hour_16]\r\n      ,[Hour_17]\r\n      ,[Hour_18]\r\n      ,[Hour_19]\r\n      ,[Hour_20]\r\n      ,[Hour_21]\r\n      ,[Hour_22]\r\n      ,[Hour_23]\r\n  FROM [dbo].[tbl_SalesReportOut]\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".salesReport"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_tbl_SalesReportOut",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_SalesreportOutBound",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "regrs_project"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-05T14:11:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_MergeSource')]",
				"[concat(variables('factoryId'), '/datasets/ds_SalesDataSource')]",
				"[concat(variables('factoryId'), '/datasets/ds_tbl_SalesImport')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/ds_tbl_SalesReportOut')]",
				"[concat(variables('factoryId'), '/datasets/ds_SalesreportOutBound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Sales_I0063_MainFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_I0063_inbound",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:01:00",
							"sleep": 10
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_I0063_inboud",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'))",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().name,'.complete' )",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_complete",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'))",
										"type": "Expression"
									},
									"FileName": {
										"value": "@activity('Filter1').output.value[0].name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_complete",
								"type": "DatasetReference",
								"parameters": {
									"Directory": {
										"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'),'/Archive')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@activity('Filter1').output.value[0].name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_complete",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "@concat('I0063','/',formatDateTime(utcNow(),'yyyyMMdd'))",
									"FileName": {
										"value": "@activity('Filter1').output.value[0].name",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_I0063_InnerFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"temp_validation": {
						"type": "String"
					}
				},
				"folder": {
					"name": "regrs_project"
				},
				"annotations": [],
				"lastPublishTime": "2025-04-05T13:42:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_I0063_inbound')]",
				"[concat(variables('factoryId'), '/datasets/ds_I0063_inboud')]",
				"[concat(variables('factoryId'), '/datasets/ds_complete')]",
				"[concat(variables('factoryId'), '/pipelines/pl_I0063_InnerFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_salesdatatransformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SalesDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-01T13:44:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SalesDataFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "sample_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat('Sales_data','/',\n    if(and(equals(utcNow('dd'),'01'),equals(utcNow('dd'),'01')),formatDateTime(addDays(utcNow('dd'),-1 ),'yyyy'),utcNow('yyyy'))\n    ,'/',\nif(equals(utcNow('dd'),'01'),\nconcat(formatDateTime(addDays(startOfMonth(utcNow('mm')), -1), 'MM'),'/',formatDateTime(addDays(utcNow('dd'),-1),'dd')),\nconcat(utcNow('MM'),'/',formatDatetime(addDays(utcNow(),-1),'dd'))))",
							"type": "Expression"
						},
						"container": "sales-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/File_Checking_and_presence_of_it')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "complete_file.csv",
						"folderPath": "Youtube Data",
						"container": "kagle-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "{",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Text_3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"File_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat('Sales_data','/',\n    if(and(equals(utcNow('dd'),'01'),equals(utcNow('dd'),'01')),formatDateTime(addDays(utcNow('dd'),-1 ),'yyyy'),utcNow('yyyy'))\n    ,'/',\nif(equals(utcNow('dd'),'01'),\nconcat(formatDateTime(addDays(startOfMonth(utcNow('mm')), -1), 'MM'),'/',formatDateTime(addDays(utcNow('dd'),-1),'dd')),\nconcat(utcNow('MM'),'/',formatDatetime(addDays(utcNow(),-1),'dd'))))",
							"type": "Expression"
						},
						"container": "sales-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unititled_File_inthe_Achive_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Youtube Data/Archieve",
						"container": "kagle-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DynamicDataOutbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_HeightOutbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('Height_outbound.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_I0063_inboud')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_I0063_inbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat('I0063','/',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_LastModifiedInbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_LastModifiedOutbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutboundFileNmae": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().OutboundFileNmae",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('LastModifiedOutbound_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_MergeSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('MergeFile_',formatDateTime(utcNow(),'yyyyMMdd'),'.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_MetadataOfIndividualFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SalesDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('MergeFile_',formatDateTime(utcNow(),'yyyyMMdd'),'.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'),'/MergeFile')",
							"type": "Expression"
						},
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SalesData_inbound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "supermarket_sales - Sheet1.csv",
						"folderPath": "SalesData",
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Invoice ID",
						"type": "String"
					},
					{
						"name": "Branch",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "Customer type",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Product line",
						"type": "String"
					},
					{
						"name": "Unit price",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Tax 5%",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Time",
						"type": "String"
					},
					{
						"name": "Payment",
						"type": "String"
					},
					{
						"name": "cogs",
						"type": "String"
					},
					{
						"name": "gross margin percentage",
						"type": "String"
					},
					{
						"name": "gross income",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SalesOutbound_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@formatDateTime(utcnow(),'yyyymmdd')",
							"type": "Expression"
						},
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SalesreportOutBound')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat('I0063/',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_complete')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_hw200')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "hw_200.csv",
						"folderPath": "20250331",
						"container": "inbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Index",
						"type": "String"
					},
					{
						"name": " Height(Inches)\"",
						"type": "String"
					},
					{
						"name": " \"Weight(Pounds)\"",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_saOutbondContainer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_saSarath",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "outbound"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_saSarath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tbl_SalesImport')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "InvoiceID",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Customer",
						"type": "varchar"
					},
					{
						"name": "Gender",
						"type": "varchar"
					},
					{
						"name": "productLine",
						"type": "varchar"
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Tax",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Total",
						"type": "decimal",
						"precision": 30,
						"scale": 2
					},
					{
						"name": "Date",
						"type": "date"
					},
					{
						"name": "Time",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Payment",
						"type": "varchar"
					},
					{
						"name": "cogs",
						"type": "varchar"
					},
					{
						"name": "grossMargin",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "grossIncome",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Rating",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "createDate",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_salesImport"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tbl_SalesReportOut')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Sale_Date",
						"type": "date"
					},
					{
						"name": "Branch",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "Total_Sales",
						"type": "decimal",
						"precision": 38,
						"scale": 10
					},
					{
						"name": "Total_Transactions",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Average_Basket_Value",
						"type": "decimal",
						"precision": 38,
						"scale": 10
					},
					{
						"name": "productLine",
						"type": "varchar"
					},
					{
						"name": "Member_Count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Normal_Count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_Cash",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_Credit",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_Ewallet",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Sales_Male",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Sales_Female",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Total_Quantity_Sold",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Average_Rating",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "GrossIncome",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Total_COGS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Gross_Margin_Percentage",
						"type": "decimal",
						"precision": 9,
						"scale": 2
					},
					{
						"name": "Hour_00",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_01",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_02",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_03",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_04",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_05",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_06",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_07",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_08",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_09",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_10",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_11",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_12",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_13",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_14",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_15",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_16",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_17",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_18",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_19",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_20",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_21",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_22",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "Hour_23",
						"type": "decimal",
						"precision": 38,
						"scale": 2
					},
					{
						"name": "CreatedDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbl_SalesReportOut"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_saSarath')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_saSarath_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_HeightData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_hw200",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_HeightOutbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as short,",
						"          { \"Height\"} as double,",
						"          { \"Weight\"} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 filter(greaterOrEqual({ \"Height\"},66)) ~> filter1",
						"filter1 derive({Weight(Kg)} = toDecimal(divide({ \"Weight\"}, 2.20),9,2),",
						"          Height_Group = iif(greater({ \"Height\"}, 70),'Above70','Below70')) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(Height_Group),",
						"     Avg_Height = toDecimal(avg({ \"Height\"}),9,3),",
						"          Avg_Weight = toDecimal(avg({ \"Weight\"}),9,2),",
						"          Row_Count = count(1)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat('heightoutbound_', toString (currentUTC('GMT'),'yyyyMMdd_HHmmss')))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_hw200')]",
				"[concat(variables('factoryId'), '/datasets/ds_HeightOutbound')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SalesDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_SalesData_inbound",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_HeightOutbound",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as double,",
						"          Quantity as short,",
						"          {Tax 5%} as double,",
						"          Total as double,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as double,",
						"          {gross margin percentage} as double,",
						"          {gross income} as double,",
						"          Rating as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          {Invoice ID} as string,",
						"          Branch as string,",
						"          City as string,",
						"          {Customer type} as string,",
						"          Gender as string,",
						"          {Product line} as string,",
						"          {Unit price} as double,",
						"          Quantity as short,",
						"          {Tax 5%} as double,",
						"          Total as double,",
						"          Date as string,",
						"          Time as string,",
						"          Payment as string,",
						"          cogs as double,",
						"          {gross margin percentage} as double,",
						"          {gross income} as double,",
						"          Rating as double",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 derive(Date_Time = concat(toString(Date),':', Time),",
						"          SalesCategory = iif(greater(Total, 200),'high',iif(greater(Total,50), 'Medium', 'Low')),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(City,",
						"          {Customer type}),",
						"     TotalSales = toDecimal(sum(multiply({Unit price},Quantity)),9,2),",
						"          AvgSales = toDecimal (avg({Unit price}*Quantity),9,2),",
						"          TransactionsCount = count(1)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat('sales_outbound_data', toString (currentUTC('GMT'),'yyyymmdd_HHMMSS')))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_SalesData_inbound')]",
				"[concat(variables('factoryId'), '/datasets/ds_HeightOutbound')]"
			]
		}
	]
}